name: main
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Build
        run: pnpm turbo --filter "@trpc/*" build
  test:
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Test
        run: pnpm turbo --filter tests test-ci

      - uses: codecov/codecov-action@v4
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          directory: ./packages

  e2e:
    name: 'E2E-tests'
    needs: [build]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DATABASE: trpcdb
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
    env:
      NEXTAUTH_SECRET: supersecret
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    strategy:
      matrix:
        dir:
          [
            .experimental/next-app-dir,
            .experimental/next-formdata,
            .test/diagnostics-big-router,
            .test/internal-types-export,
            .test/ssg,
            cloudflare-workers,
            express-minimal,
            express-server,
            fastify-server,
            minimal-react,
            next-minimal-starter,
            next-prisma-starter,
            next-prisma-todomvc,
            next-prisma-websockets-starter,
            soa,
            standalone-server,
            vercel-edge-runtime,
          ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Build trpc
        run: pnpm turbo --filter "@trpc/*" build --force

      - name: Install playwright ???
        # Seems like some of playwright's system deps aren't being cached, so we're making sure they are installed
        run: |
          cat ./examples/${{ matrix.dir }}/package.json | 
          if grep --silent '"@playwright/test"';
            then pnpm playwright install chromium;
          fi

      - name: Run test-dev
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-dev
      - name: Run build
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} build type-check --force
      - name: Run test-start
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-start

  e2e-deno:
    name: 'E2E-tests (Deno)'
    needs: [build]
    env:
      NEXTAUTH_SECRET: supersecret
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      # TURBO_REMOTE_ONLY: true
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    strategy:
      matrix:
        dir: [deno-deploy]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Build trpc
        run: pnpm turbo --filter "@trpc/*" build

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - run: deno --version

      - name: run test
        if: ${{ matrix.dir == 'deno-deploy' }}
        run: |
          cd ./examples/${{ matrix.dir }}
          pnpm dlx start-server-and-test "deno run --allow-net=:8000 --allow-env ./src/index.ts" http://127.0.0.1:8000 "deno run --allow-net --allow-env ./src/client.ts"

  e2e-bun:
    name: 'E2E-tests (Bun)'
    needs: [build]
    env:
      NEXTAUTH_SECRET: supersecret
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      # TURBO_REMOTE_ONLY: true
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    continue-on-error: true
    strategy:
      matrix:
        dir: [bun]
        os: [ubuntu-latest]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Build trpc
        run: pnpm turbo --filter "@trpc/*" build

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - run: bun --version

      - name: Run test-dev
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-dev
      - name: Run build
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} build type-check
      - name: Run test-start
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-start

  e2e-legacy-node:
    needs: [build]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DATABASE: trpcdb
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
    env:
      NEXTAUTH_SECRET: supersecret
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    strategy:
      matrix:
        dir:
          [
            next-prisma-starter,
            next-prisma-websockets-starter,
            next-prisma-todomvc,
          ]
        node-start: ['18.x']
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/setup

      - name: Build trpc
        run: pnpm turbo --filter "@trpc/*" build

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-start }}
          cache: 'pnpm'
      - run: node -v
      - name: Install playwright ???
        # Seems like some of playwright's system deps aren't being cached, so we're making sure they are installed
        run: |
          cat ./examples/${{ matrix.dir }}/package.json | 
          if grep --silent '"@playwright/test"';
            then pnpm playwright install chromium;
          fi
      - name: Run test-dev
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-dev
      - name: Run build
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} build type-check
      - name: Run test-start
        run: pnpm turbo --filter ./examples/${{ matrix.dir }} test-start
